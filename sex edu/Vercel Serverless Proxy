// Vercel Serverless Function 程式碼 (Node.js)
// 負責安全地隱藏 Gemini API Key 並處理串流轉發

import { GoogleGenAI } from "@google/genai";
import fetch from 'node-fetch'; // 確保 Node.js 環境可以識別 fetch

// 關鍵：從 Vercel 的環境變數中安全地讀取 API Key
const apiKey = process.env.GEMINI_API_KEY;

// 錯誤檢查：若密鑰未配置，則無法運行
if (!apiKey) {
    console.error("FATAL ERROR: GEMINI_API_KEY environment variable is not set.");
}

// 初始化 Gemini SDK (這裡使用傳統的 fetch 方式更適合代理，但為了簡潔，我們使用 fetch 邏輯)

export default async function handler(req, res) {
    // 1. 安全性檢查
    if (req.method !== 'POST') {
        res.status(405).send('Method Not Allowed');
        return;
    }

    if (!apiKey) {
        res.status(500).send('Server Error: API Key not configured.');
        return;
    }

    try {
        // 2. 解析前端發送的請求體 (包含用戶的 prompt 和系統指令)
        const requestBody = req.body; 
        
        // 3. 構造對 Gemini 官方 API 的請求
        // 注意：我們使用 generateContentStream 讓回應具有串流性
        const geminiResponse = await fetch('https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContentStream', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                // 安全地將 API Key 加入到後端請求中
                'x-goog-api-key': apiKey,
            },
            // 將客戶端發送的 body 直接傳遞給 Gemini
            body: JSON.stringify(requestBody)
        });

        // 4. 錯誤處理
        if (!geminiResponse.ok) {
            const errorText = await geminiResponse.text();
            res.status(geminiResponse.status).send(`Gemini API Error: ${errorText}`);
            return;
        }

        // 5. 啟用串流轉發
        // 設置標頭，告訴瀏覽器這是一個串流回應
        res.setHeader('Content-Type', 'text/plain; charset=utf-8');
        res.setHeader('Transfer-Encoding', 'chunked');

        // 將 Gemini 的原始回應流直接管道 (pipe) 轉發給客戶端
        // 這是最簡單高效的串流代理方式
        geminiResponse.body.pipe(res);
        
    } catch (error) {
        console.error('Proxy Execution Error:', error);
        res.status(500).send('Internal Server Error during API processing.');
    }
}
